const { EmbedBuilder, SlashCommandBuilder } = require("discord.js");

const { fetchForecast } = require("../requests/forecast");

const data = new SlashCommandBuilder()
  .setName("forecast")
  .setDescription("Replies with the weather forecast")
  .addStringOption((option) => {
    return option
      .setName("location")
      .setDescription(
        "Enter location as city, zip/postal code or geo coordinates",
      )
      .setRequired(true);
  })
  .addStringOption((option) => {
    return option
      .setName("units")
      .setDescription('Unit system: "Metric" or "Imperial"')
      .setRequired(false)
      .addChoices(
        {
          name: "Metric",
          value: "Metric",
        },
        { name: "Imperial", value: "Imperial" },
      );
  });

const execute = async (interaction) => {
  await interaction.deferReply(); // triggers ephemeral loading message in chat window

  const location = interaction.options.getString("location");
  const units = interaction.options.getString("units") || "Imperial";
  const isMetric = units === "Metric";

  try {
    const { locationName, weatherData } = await fetchForecast(location);
    const embedBuilder = new EmbedBuilder()
      .setColor(0x7bd8f7)
      .setTitle(`Weather forecast for ${locationName}...`)
      .setDescription(`Using the ${units} system`)
      .setTimestamp()
      .setFooter({ text: "Generated by https://www.weatherapi.com/" });

    for (const day of weatherData) {
      const tempMin = isMetric
        ? `${day.minTemp_C}\u00B0 C`
        : `${day.minTemp_F}\u00B0 F`;
      const tempMax = isMetric
        ? `${day.maxTemp_C}\u00B0 C`
        : `${day.maxTemp_F}\u00B0 F`;

      embedBuilder.addFields({
        name: day.date,
        value: `⬇️ Low: ${tempMin}, ⬆️ High: ${tempMax}`,
      });
    }
    await interaction.editReply({
      embeds: [embedBuilder],
    });
  } catch (error) {
    await interaction.editReply(error);
  }
};

module.exports = { data, execute };
